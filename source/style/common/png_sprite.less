// /*
// SCSS variables are information about icon's compiled state, stored under its original file name

// .icon-home {
//   width: $icon-home-width;
// }

// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;

// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
// */
// $list-1-name: 'list_1';
// $list-1-x: 161px;
// $list-1-y: 0px;
// $list-1-offset-x: -161px;
// $list-1-offset-y: 0px;
// $list-1-width: 99px;
// $list-1-height: 91px;
// $list-1-total-width: 260px;
// $list-1-total-height: 248px;
// $list-1-image: '../img/png_sprite.png';
// $list-1: (161px, 0px, -161px, 0px, 99px, 91px, 260px, 248px, '../img/png_sprite.png', 'list_1', );
// $list-2-name: 'list_2';
// $list-2-x: 0px;
// $list-2-y: 140px;
// $list-2-offset-x: 0px;
// $list-2-offset-y: -140px;
// $list-2-width: 58px;
// $list-2-height: 108px;
// $list-2-total-width: 260px;
// $list-2-total-height: 248px;
// $list-2-image: '../img/png_sprite.png';
// $list-2: (0px, 140px, 0px, -140px, 58px, 108px, 260px, 248px, '../img/png_sprite.png', 'list_2', );
// $list-3-name: 'list_3';
// $list-3-x: 0px;
// $list-3-y: 0px;
// $list-3-offset-x: 0px;
// $list-3-offset-y: 0px;
// $list-3-width: 141px;
// $list-3-height: 120px;
// $list-3-total-width: 260px;
// $list-3-total-height: 248px;
// $list-3-image: '../img/png_sprite.png';
// $list-3: (0px, 0px, 0px, 0px, 141px, 120px, 260px, 248px, '../img/png_sprite.png', 'list_3', );
// $spritesheet-width: 260px;
// $spritesheet-height: 248px;
// $spritesheet-image: '../img/png_sprite.png';
// $spritesheet-sprites: ($list-1, $list-2, $list-3, );
// $spritesheet: (260px, 248px, '../img/png_sprite.png', $spritesheet-sprites, );

// /*
// The provided mixins are intended to be used with the array-like variables

// .icon-home {
//   @include sprite-width($icon-home);
// }

// .icon-email {
//   @include sprite($icon-email);
// }

// Example usage in HTML:

// `display: block` sprite:
// <div class="icon-home"></div>

// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// // CSS
// .icon {
//   display: inline-block;
// }

// // HTML
// <i class="icon icon-home"></i>
// */
// @mixin sprite-width($sprite) {
//   width: nth($sprite, 5);
// }

// @mixin sprite-height($sprite) {
//   height: nth($sprite, 6);
// }

// @mixin sprite-position($sprite) {
//   $sprite-offset-x: nth($sprite, 3);
//   $sprite-offset-y: nth($sprite, 4);
//   background-position: $sprite-offset-x  $sprite-offset-y;
// }

// @mixin sprite-image($sprite) {
//   $sprite-image: nth($sprite, 9);
//   background-image: url(#{$sprite-image});
// }

// @mixin sprite($sprite) {
//   @include sprite-image($sprite);
//   @include sprite-position($sprite);
//   @include sprite-width($sprite);
//   @include sprite-height($sprite);
// }

// /*
// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS

// @include sprites($spritesheet-sprites);
// */
// @mixin sprites($sprites) {
//   @each $sprite in $sprites {
//     $sprite-name: nth($sprite, 10);
//     .#{$sprite-name} {
//       @include sprite($sprite);
//     }
//   }
// }
